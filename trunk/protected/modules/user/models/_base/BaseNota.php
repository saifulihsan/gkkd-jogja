<?php

/**
 * This is the model base class for the table "nota".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Nota".
 *
 * Columns in table "nota" available as properties of the model,
 * followed by relations of table "nota" available as properties of the model.
 *
 * @property integer $nota_id
 * @property integer $sales_id
 * @property string $term
 * @property string $warehouse
 * @property string $status
 * @property string $currency
 * @property string $notes
 * @property string $rate
 * @property string $doc_date
 * @property string $doc_ref
 * @property integer $customer_id
 * @property string $trans_date
 * @property string $total_1
 * @property string $disc
 * @property string $total_2
 *
 * @property Customers $customer
 * @property Sales $sales
 * @property NotaDtl[] $notaDtls
 */
abstract class BaseNota extends GxActiveRecord {
    
	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'nota';
	}

	public static function representingColumn() {
		return 'term';
	}

	public function rules() {
		return array(
			array('sales_id, customer_id', 'numerical', 'integerOnly'=>true),
			array('term, warehouse, status, currency, notes, rate, doc_date, doc_ref, trans_date, total_1, disc, total_2', 'safe'),
			array('sales_id, term, warehouse, status, currency, notes, rate, doc_date, doc_ref, customer_id, trans_date, total_1, disc, total_2', 'default', 'setOnEmpty' => true, 'value' => null),
			array('nota_id, sales_id, term, warehouse, status, currency, notes, rate, doc_date, doc_ref, customer_id, trans_date, total_1, disc, total_2', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'customer' => array(self::BELONGS_TO, 'Customers', 'customer_id'),
			'sales' => array(self::BELONGS_TO, 'Sales', 'sales_id'),
			'notaDtls' => array(self::HAS_MANY, 'NotaDtl', 'nota_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'nota_id' => Yii::t('app', 'Nota'),
			'sales_id' => Yii::t('app', 'Sales'),
			'term' => Yii::t('app', 'Term'),
			'warehouse' => Yii::t('app', 'Warehouse'),
			'status' => Yii::t('app', 'Status'),
			'currency' => Yii::t('app', 'Currency'),
			'notes' => Yii::t('app', 'Notes'),
			'rate' => Yii::t('app', 'Rate'),
			'doc_date' => Yii::t('app', 'Doc Date'),
			'doc_ref' => Yii::t('app', 'Doc Ref'),
			'customer_id' => Yii::t('app', 'Customer'),
			'trans_date' => Yii::t('app', 'Trans Date'),
			'total_1' => Yii::t('app', 'Total 1'),
			'disc' => Yii::t('app', 'Disc'),
			'total_2' => Yii::t('app', 'Total 2'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('nota_id', $this->nota_id);
		$criteria->compare('sales_id', $this->sales_id);
		$criteria->compare('term', $this->term, true);
		$criteria->compare('warehouse', $this->warehouse, true);
		$criteria->compare('status', $this->status, true);
		$criteria->compare('currency', $this->currency, true);
		$criteria->compare('notes', $this->notes, true);
		$criteria->compare('rate', $this->rate, true);
		$criteria->compare('doc_date', $this->doc_date, true);
		$criteria->compare('doc_ref', $this->doc_ref, true);
		$criteria->compare('customer_id', $this->customer_id);
		$criteria->compare('trans_date', $this->trans_date, true);
		$criteria->compare('total_1', $this->total_1, true);
		$criteria->compare('disc', $this->disc, true);
		$criteria->compare('total_2', $this->total_2, true);

		return new CActiveDataProvider(get_class($this), array(
			'criteria' => $criteria,
		));
	}
}