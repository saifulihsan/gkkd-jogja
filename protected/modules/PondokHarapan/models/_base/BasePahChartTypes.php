<?php

/**
 * This is the model base class for the table "pah_chart_types".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "PahChartTypes".
 *
 * Columns in table "pah_chart_types" available as properties of the model,
 * followed by relations of table "pah_chart_types" available as properties of the model.
 *
 * @property string $id
 * @property string $name
 * @property string $class_id
 * @property string $parent
 * @property integer $inactive
 *
 * @property PahChartMaster[] $pahChartMasters
 * @property PahChartClass $class
 */
abstract class BasePahChartTypes extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'pah_chart_types';
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('id', 'required'),
			array('inactive', 'numerical', 'integerOnly'=>true),
			array('id, parent', 'length', 'max'=>10),
			array('name', 'length', 'max'=>60),
			array('class_id', 'length', 'max'=>3),
			array('name, class_id, parent, inactive', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, name, class_id, parent, inactive', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'pahChartMasters' => array(self::HAS_MANY, 'PahChartMaster', 'account_type'),
			'class' => array(self::BELONGS_TO, 'PahChartClass', 'class_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'name' => Yii::t('app', 'Name'),
			'class_id' => Yii::t('app', 'Class'),
			'parent' => Yii::t('app', 'Parent'),
			'inactive' => Yii::t('app', 'Inactive'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('class_id', $this->class_id);
		$criteria->compare('parent', $this->parent, true);
		$criteria->compare('inactive', $this->inactive);

		return new CActiveDataProvider(get_class($this), array(
			'criteria' => $criteria,
		));
	}
}