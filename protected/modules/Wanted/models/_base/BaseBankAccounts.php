<?php

/**
 * This is the model base class for the table "bank_accounts".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "BankAccounts".
 *
 * Columns in table "bank_accounts" available as properties of the model,
 * followed by relations of table "bank_accounts" available as properties of the model.
 *
 * @property integer $id
 * @property string $account_code
 * @property integer $account_type
 * @property string $bank_account_name
 * @property string $bank_account_number
 * @property string $bank_name
 * @property string $bank_address
 * @property string $bank_curr_code
 * @property integer $dflt_curr_act
 * @property string $last_reconciled_date
 * @property double $ending_reconcile_balance
 * @property integer $inactive
 *
 * @property ChartMaster $accountCode
 */
abstract class BaseBankAccounts extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'bank_accounts';
	}

	public static function representingColumn() {
		return 'bank_account_name';
	}

	public function rules() {
		return array(
			array('account_type, dflt_curr_act, inactive', 'numerical', 'integerOnly'=>true),
			array('ending_reconcile_balance', 'numerical'),
			array('account_code', 'length', 'max'=>15),
			array('bank_account_name, bank_name', 'length', 'max'=>60),
			array('bank_account_number', 'length', 'max'=>100),
			array('bank_curr_code', 'length', 'max'=>3),
			array('bank_address, last_reconciled_date', 'safe'),
			array('account_code, account_type, bank_account_name, bank_account_number, bank_name, bank_address, bank_curr_code, dflt_curr_act, last_reconciled_date, ending_reconcile_balance, inactive', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, account_code, account_type, bank_account_name, bank_account_number, bank_name, bank_address, bank_curr_code, dflt_curr_act, last_reconciled_date, ending_reconcile_balance, inactive', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'accountCode' => array(self::BELONGS_TO, 'ChartMaster', 'account_code'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'account_code' => Yii::t('app', 'Account Code'),
			'account_type' => Yii::t('app', 'Account Type'),
			'bank_account_name' => Yii::t('app', 'Bank Account Name'),
			'bank_account_number' => Yii::t('app', 'Bank Account Number'),
			'bank_name' => Yii::t('app', 'Bank Name'),
			'bank_address' => Yii::t('app', 'Bank Address'),
			'bank_curr_code' => Yii::t('app', 'Bank Curr Code'),
			'dflt_curr_act' => Yii::t('app', 'Dflt Curr Act'),
			'last_reconciled_date' => Yii::t('app', 'Last Reconciled Date'),
			'ending_reconcile_balance' => Yii::t('app', 'Ending Reconcile Balance'),
			'inactive' => Yii::t('app', 'Inactive'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('account_code', $this->account_code);
		$criteria->compare('account_type', $this->account_type);
		$criteria->compare('bank_account_name', $this->bank_account_name, true);
		$criteria->compare('bank_account_number', $this->bank_account_number, true);
		$criteria->compare('bank_name', $this->bank_name, true);
		$criteria->compare('bank_address', $this->bank_address, true);
		$criteria->compare('bank_curr_code', $this->bank_curr_code, true);
		$criteria->compare('dflt_curr_act', $this->dflt_curr_act);
		$criteria->compare('last_reconciled_date', $this->last_reconciled_date, true);
		$criteria->compare('ending_reconcile_balance', $this->ending_reconcile_balance);
		$criteria->compare('inactive', $this->inactive);

		return new CActiveDataProvider(get_class($this), array(
			'criteria' => $criteria,
		));
	}
}